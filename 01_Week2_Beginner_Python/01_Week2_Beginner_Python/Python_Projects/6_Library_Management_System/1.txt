'''
==========================Written By Me============================
6. Library Management System (CLI)
Skills: Data relationships, CRUD, search/filter, validations
Features:
Add books (title, author, ISBN, availability)
Borrow/return books
Search by title/author
Track overdue books (using datetime)
'''
from datetime import datetime
now = datetime.now()
today_date = now.date()

import json
books = []
file_path1 = r'6_Library_Management_System\library_books.json'
try:
    with open(file_path1,'r', encoding='utf-8') as file:
        books = json.load(file)
except:
    books = []

def save_book_logs():
    with open(file_path1,'w', encoding='utf-8') as file:
        json.dump(books, file, indent=4)

def addBbook(title, author, isbn):
    id = len(books) + 1
    new_book = {'id':id,
                'title':title,
                'author': author,
                'ISBN': isbn,
                'availability': 'available',
                'borrowed_by': None,
                'borrow_date': None,
                'due_date': None
                }
    found = False
    for book in books:
        if new_book['ISBN'] == book['ISBN']:
           found = True 
           print("Book with this ISBN number already exist. ISBN should be unique")
           break
    if not found:
        books.append(new_book)
        save_book_logs()
        
def borrowBook(book_name):
        found = False
        for book in books:
            if(book['title'] == book_name):
                found = True
                if(book['availability'] == 'Borrowed'):
                    print("This Book is already Borrowed by someone")
                    break
                else:  
                    borrower_name = str(input("Enter Your Name For borrowing the book : ")).capitalize()
                    due_date = str(input('Enter due date(YYYY-MM-DD) for borrowing a book  : '))
                    book['availability'] = 'Borrowed'
                    book['borrowed_by'] = borrower_name
                    book['borrow_date'] = today_date
                    if(due_date >= book['borrow_date']):
                        book['due_date'] = due_date
                    else:
                        print("Due Date must be greater than or equal to borrow Date")
                        break
                    save_book_logs()
                    print('‚úÖ Book is Borrowed')
        if not found:
            print("This Book is not avaiblabe in our Library")
            
def returnBooks(book_name):
    found = False
    for book in books:
        if(book['title'] == book_name and book['availability'] == 'Available'):    #book is available
            found = True
            print('This book is not Borrowed by someone')
            break
        elif(book['title'] == book_name and book['availability'] == 'Borrowed'):   #book is borrowed
            found = True
            borrower_name = str(input("Enter Book Borrower Name : "))
            if(book['borrowed_by'] == borrower_name):              
                due_date = datetime.strptime(book['due_date'], '%Y-%m-%d').date()
                if(today_date > due_date):
                    days_late = (today_date - due_date).days
                    book['availability'] = 'Available'
                    book['borrowed_by'] = None
                    book['borrow_date'] = None
                    book['due_date'] = None
                    print('‚úÖ Book returned successfully.')
                    print(f'‚ö† Late Return Notice: This book was due on {due_date}. {days_late} days late')
                    save_book_logs()
                else:
                    book['availability'] = 'Available'
                    book['borrowed_by'] = None
                    book['borrowe_date'] = None
                    book['due_date'] = None
                    print('‚úÖ Book returned successfully.')
                    save_book_logs()
            else:
                print("Wrong Borrower Name, Enter Correct Name!")
    if not found:
        print('This book is not in our library, nor have we lent it to anyone.')
                
def searchBookbyTitle(title):
    found = False
    for book in books:
        if book['title'] == title:
            found = True
            print('This Book is available in Library')
            break
    if not found:
        print('This book is not available right now!')
            
def overDueBooks():
    overdue_books = []
    for book in books:
        if book['due_date'] is not None:
            due_date = datetime.strptime(book['due_date'], "%Y-%m-%d").date()
            if(due_date < today_date):
                days_late = (today_date - due_date).days
                overdue_books.append({
                    'title': book['title'],
                    'borrowed_by': book['borrowed_by'],
                    'due_date': book['due_date'],
                    'days_late': days_late
                })
    if not overdue_books:
        print("No overdue Books Today")
    else:
        print("\nüìö Overdue Books:")
        for book in overdue_books:
            print(f"Title       : {book['title']}")
            print(f"Borrowed by : {book['borrowed_by']}")
            print(f"Due date   : {book['due_date']}")
            print(f"Days late  : {book['days_late']} days")
            print("-" * 30)

while True:
    print("\nüìö Library Management System")
    print("1. Add New Book")
    print("2. Borrow Book")
    print("3. Return Book")
    print("4. Search Book by Title")
    print("5. View Overdue Books")
    print("6. Exit")
    print("-" * 30)

    choice = input("Enter your choice (1-6): ").strip()

    if choice == '1':
        title = input("Enter book title: ").strip()
        author = input("Enter author name: ").strip()
        isbn = input("Enter ISBN: ").strip()
        addBbook(title, author, isbn)

    elif choice == '2':
        book_name = input("Enter book title to borrow: ").strip()
        borrowBook(book_name)

    elif choice == '3':
        book_name = input("Enter book title to return: ").strip()
        returnBooks(book_name)

    elif choice == '4':
        title = input("Enter book title to search: ").strip()
        searchBookbyTitle(title)

    elif choice == '5':
        overDueBooks()

    elif choice == '6':
        print("Goodbye! üëã")
        break
    else:
        print("‚ùå Invalid choice! Please select between 1 and 6.")


#==========================Optimize by me===============================
# '''
# 6. Library Management System (CLI)
# Skills: Data relationships, CRUD, search/filter, validations
# Features:
# Add books (title, author, ISBN, availability)
# Borrow/return books
# Search by title/author
# Track overdue books (using datetime)
# '''
# from datetime import datetime
# now = datetime.now()
# today_date = now.date()

# import json
# books = []
# file_path1 = r'6_Library_Management_System\library_books.json'
# try:
#     with open(file_path1,'r', encoding='utf-8') as file:
#         books = json.load(file)
# except:
#     books = []

# def save_book_logs():
#     with open(file_path1,'w', encoding='utf-8') as file:
#         json.dump(books, file, indent=4)

# def addBbook(title, author, isbn):
#     try:
#         id = len(books) + 1
#         new_book = {'id':id,
#                     'title':title,
#                     'author': author,
#                     'ISBN': isbn,
#                     'availability': 'available',
#                     'borrowed_by': None,
#                     'borrow_date': None,
#                     'due_date': None
#                     }

#         if any(new_book['ISBN'] == book['ISBN'] for book in books):
#             found = True 
#             print("Book with this ISBN number already exist. ISBN should be unique")
#         else:
#             books.append(new_book)
#             save_book_logs()

#     except Exception as e:
#         print(f'‚ùå Error while adding a booking {e}')
            
# def borrowBook(book_name):
#     try:
#         book_found = None
#         for book in books:
#             if book['title'] == book_name:
#                 book_found = book   #--> both book_founf and book reference to same object(dictionary)
#                 break
        
#         if book_found:  #(agar book mil gaye)
#             if(book_found['availability'] == 'Borrowed'):
#                     print("This Book is already Borrowed by someone")
#             else:
#                 borrower_name = str(input("Enter Your Name For borrowing the book : ")).capitalize()
#                 due_date_str = str(input('Enter due date(YYYY-MM-DD) for borrowing a book  : '))
#                 today_date_str = today_date.strftime('%Y-%m-%d')
#                 if due_date_str>=today_date_str:
#                     book_found['due_date'] = due_date_str
#                     book_found['availability'] = 'Borrowed'
#                     book_found['borrowed_by'] = borrower_name
#                     book_found['borrow_date'] = today_date_str
#                     save_book_logs()
#                     print('‚úÖ Book is Borrowed')
#                 else:
#                     print("Due Date must be greater than or equal to borrow Date")
#         else:
#             print("This Book is not available in our Library")
#     except ValueError:
#         print('‚ùå Invalid date format! Please use YYYY-MM-DD')
#     except KeyError as e:
#         print(f"‚ùå Missing key in book record: {e}")
#     except Exception as e:
#         print(f'Error while borrowing book: {e}')
        
# def returnBooks(book_name):
#     try:
#         book_return = None
#         for book in books:
#             if(book['title'] == book_name and book['availability'] == 'Borrowed'):    #book is available
#                 book_return = book
#                 break
            
#         if not book_return:
#             print('This book is not in our library, nor have we lent it to anyone.')
#             return
    
#         borrower_name = str(input("Enter Book Borrower Name : "))
#         if(book_return['borrowed_by'] != borrower_name):
#             print("Wrong Borrower Name, Enter Correct Name!")
#             return
        
#         due_date = datetime.strptime(book['due_date'], '%Y-%m-%d').date()
#         if(today_date > due_date):
#             days_late = (today_date - due_date).days
#             print(f'‚ö† Late Return Notice: This book was due on {due_date}. {days_late} days late')

#         book['availability'] = 'Available'
#         book['borrowed_by'] = None
#         book['borrow_date'] = None
#         book['due_date'] = None
#         print('‚úÖ Book returned successfully.')
#         save_book_logs()
        
#     except ValueError:
#         print("‚ùå Invalid date format in book record!")
#     except KeyError as e:
#         print(f"‚ùå Missing key in book record: {e}")
#     except Exception as e:
#         print(f"‚ùå Error while returning book: {e}")
                        
# def searchBookbyTitle(title):
#     try:
#         book_found = [book for book in books if book['title'] == title]
#         if book_found:
#             print('This Book is available in Library')
#         else:
#             print('This book is not available right now!')
#     except Exception as e:
#         print(f"‚ùå Error while searching book: {e}")
            
# def overDueBooks():
#     try:
#         overdue_books = []
#         for book in books:
#             if book['due_date'] is not None:
#                 due_date = datetime.strptime(book['due_date'], "%Y-%m-%d").date()
#                 if(due_date < today_date):
#                     days_late = (today_date - due_date).days
#                     overdue_books.append({
#                         'title': book['title'],
#                         'borrowed_by': book['borrowed_by'],
#                         'due_date': book['due_date'],
#                         'days_late': days_late
#                     })
#         if not overdue_books:
#             print("No overdue Books Today")
#         else:
#             print("\nüìö Overdue Books:")
#             for book in overdue_books:
#                 print(f"Title       : {book['title']}")
#                 print(f"Borrowed by : {book['borrowed_by']}")
#                 print(f"Due date   : {book['due_date']}")
#                 print(f"Days late  : {book['days_late']} days")
#                 print("-" * 30)
#     except ValueError:
#         print("‚ùå Invalid date format in book record!")
#     except KeyError as e:
#         print(f"‚ùå Missing key in book record: {e}")
#     except Exception as e:
#         print(f"‚ùå Error while fetching overdue books: {e}")

# while True:
#     print("\nüìö Library Management System")
#     print("1. Add New Book")
#     print("2. Borrow Book")
#     print("3. Return Book")
#     print("4. Search Book by Title")
#     print("5. View Overdue Books")
#     print("6. Exit")
#     print("-" * 30)

#     choice = input("Enter your choice (1-6): ").strip()

#     if choice == '1':
#         title = input("Enter book title: ").strip()
#         author = input("Enter author name: ").strip()
#         isbn = input("Enter ISBN: ").strip()
#         addBbook(title, author, isbn)

#     elif choice == '2':
#         book_name = input("Enter book title to borrow: ").strip()
#         borrowBook(book_name)

#     elif choice == '3':
#         book_name = input("Enter book title to return: ").strip()
#         returnBooks(book_name)

#     elif choice == '4':
#         title = input("Enter book title to search: ").strip()
#         searchBookbyTitle(title)

#     elif choice == '5':
#         overDueBooks()

#     elif choice == '6':
#         print("Goodbye! üëã")
#         break

#     else:
#         print("‚ùå Invalid choice! Please select between 1 and 6.")
    
            
            
            
            
            
    
    
    
                    
                    
                    
                    
                
                
        
        
        
    
    
    